from fastapi import FastAPI
import db
from db import Base, engine
from models import User, Transactions
from routers import users, transactions, categories,accounts,  debts, limits, targets, operationsrepeat, project, tasks, ai, balance_forecast, piy
from routers.limits import reset_limits_logic  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±—Ä–æ—Å–∞
from routers.operationsrepeat import repeat_operation  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
from routers.users import remove_payment #–°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ —É —é–∑–µ—Ä–∞
from auth import auth
from fastapi.openapi.utils import get_openapi
from fastapi.middleware.cors import CORSMiddleware
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
from db import SessionLocal
import asyncio  # –î–æ–±–∞–≤—å –≤ –∏–º–ø–æ—Ä—Ç—ã
from prometheus_fastapi_instrumentator import Instrumentator
# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
Base.metadata.create_all(bind=engine)
print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")

def scheduled_reset_limits():
    db = SessionLocal()
    try:
        result = reset_limits_logic(db)
        if result:
            print("–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º!")
        else:
            print("–õ–∏–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Å–±—Ä–æ—Å–∞.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
    finally:
        db.close()
 

def scheduled_remove_payment():
    db = SessionLocal()
    try:
        result = remove_payment(db)
        if result:
            print("–°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
        else:
            print("–°–±—Ä–æ—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
    finally:
        db.close()  
        
          
async def scheduled_repeat_operation():
    db = SessionLocal()
    try:
        result = await repeat_operation(db)
        if result:
            print("–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        else:
            print("–û–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
    finally:
        db.close()

def run_repeat_operation():
    asyncio.run(scheduled_repeat_operation())

scheduler = BackgroundScheduler()

# Swagger: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="JWT Swagger Auth Example",
        version="1.0",
        description="Testing JWT bearer in Swagger",
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    }
    for path in openapi_schema["paths"].values():
        for method in path.values():
            method["security"] = [{"BearerAuth": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app = FastAPI(
    title="Easy Plan API",
    description="API –¥–ª—è Easy Plan",
    version="0.1.0",
    docs_url="/api/docs",
    redoc_url="/api/redoc",
    openapi_url="/api/openapi.json",
    openapi_tags=[
        {"name": "auth", "description": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"},
        {"name": "users", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"},
        {"name": "transactions", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"},
        {"name": "categories", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"},
        {"name": "accounts", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏"},
        {"name": "accounts_under", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–¥—Å—á–µ—Ç–∞–º–∏"},
        {"name": "debts", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –î–æ–ª–≥–∞–º–∏"},
        {"name": "limits", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –õ–∏–º–∏—Ç–∞–º–∏"},
        {"name": "targets", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –¶–µ–ª—è–º–∏"},
        {"name": "operationsrepeat", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ"},
        {"name": "project", "description": "–ü—Ä–æ–µ–∫—Ç—ã"},
        {"name": "tasks", "description": "–¢–∞—Å–∫–∏"},
        {"name": "ai", "description": "–ê–ò-–ø–æ–º–æ—â–Ω–∏–∫"},
        {"name": "balance_forecast", "description": "–ü—Ä–æ–≥–Ω–æ–∑ –±–∞–ª–∞–Ω—Å–∞"},
        {"name": "piy", "description": "–ü–∏—Ä–æ–≥"},
        
        
        
    ]
)

Instrumentator().instrument(app).expose(app)


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ custom_openapi –∫ app
app.openapi = custom_openapi
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
app.include_router(auth.router, prefix="/api")
app.include_router(users.router, prefix="/api")
app.include_router(categories.router, prefix="/api")
app.include_router(transactions.router, prefix="/api")
app.include_router(accounts.router, prefix="/api")
# app.include_router(rules.router, prefix="/api")
# app.include_router(accounts_under.router, prefix="/api")
app.include_router(debts.router, prefix="/api")
app.include_router(limits.router, prefix="/api")
app.include_router(targets.router, prefix="/api")
app.include_router(operationsrepeat.router, prefix="/api")
app.include_router(project.router, prefix="/api")
app.include_router(tasks.router, prefix="/api")
app.include_router(ai.router, prefix="/api")
app.include_router(balance_forecast.router, prefix="/api")
app.include_router(piy.router, prefix="/api")



# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
def start_scheduler():
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

    scheduler.add_job(scheduled_reset_limits, CronTrigger.from_crontab("0 * * * *"))
    # scheduler.add_job(run_repeat_operation, CronTrigger.from_crontab("0 * * * *"))
    scheduler.add_job(scheduled_remove_payment, CronTrigger.from_crontab("* * * * *"))



    scheduler.start()
    
        # üëá –¥–æ–±–∞–≤–ª—è–µ–º Prometheus-–º–µ—Ç—Ä–∏–∫–∏
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
@app.on_event("shutdown")
def shutdown_scheduler():
    scheduler.shutdown()
    print("Scheduler stopped!")




# pip install alembic
# alembic init alembic
#
