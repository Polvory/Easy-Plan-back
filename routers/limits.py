from typing import List
from fastapi import APIRouter, HTTPException, status, Depends, Query, Response
from db import SessionLocal
from models import Limits, User  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ Transaction
from sqlalchemy.orm import Session
from datetime import datetime
from auth.auth import login, guard_role, TokenPayload
from dateutil.relativedelta import relativedelta
import logging

from schemas import CreateLimit, LimitOut, LimitUpdate
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
router = APIRouter(
    prefix="/limits",
    tags=["limits"],  # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –≤ Swagger UI
)


# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()



@router.get("/", 
            summary="–ü–æ–ª—É—á–∏—Ç—å –ª–∏–º–∏—Ç—ã", 
            response_model=List[LimitOut],
            status_code=status.HTTP_200_OK            
            )
def get_limits(
    current_user: TokenPayload = Depends(guard_role(["admin", "user"])),
    db: Session = Depends(get_db),
):
    limits = db.query(Limits)
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤ –¥–ª—è user_id: {current_user.user_id}")
    if limits is not None:
        limits = limits.filter(Limits.user_id == current_user.user_id)
    else:
         raise HTTPException(status_code=404, detail="No limits found")
    return limits  


@router.post("/create", summary="–°–æ–∑–¥–∞—Ç—å –ª–∏–º–∏—Ç", status_code=status.HTTP_201_CREATED)
def create_limits(
    limit: CreateLimit,
    current_user: TokenPayload = Depends(guard_role(["admin", "user"])),
    db: Session = Depends(get_db)
):
    try:
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è user_id: {current_user.user_id}")
        # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        existing_limit = db.query(Limits).filter_by(
            user_id=current_user.user_id,
            category_id=limit.category_id
        ).first()

        if existing_limit:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="–õ–∏–º–∏—Ç —Å —Ç–∞–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        new_limit = Limits(
            balance=limit.balance,
            date_update=limit.date_update,
            user_id=current_user.user_id,
            category_id=limit.category_id,
        )
        db.add(new_limit)
        db.commit()
        db.refresh(new_limit)
        return new_limit
    except Exception as e:
        logger.error(str(e))
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: {str(e)}"
        )
        


@router.delete("/", 
               summary="–£–¥–∞–ª–∏—Ç—å –ª–∏–º–∏—Ç",
               status_code=status.HTTP_204_NO_CONTENT)
def delete_limits(
    limit_id: int,
    db: Session = Depends(get_db)
):
    try:
        user_id = 1
        logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ {limit_id} –¥–ª—è user_id: {user_id}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        limit = db.query(Limits).filter(Limits.id == limit_id).first()
        
        if not limit:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –¥–æ–ª–≥ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω)
        if limit.user_id != user_id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–æ–ª–≥–∞"
            )
        
        db.delete(limit)
        db.commit()
        
        return Response(status_code=status.HTTP_204_NO_CONTENT)
    
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–æ–ª–≥–∞: {str(e)}"
        )

def reset_limits_logic(db: Session):
    today = datetime.utcnow().date()
    limits = db.query(Limits).all()
    if not limits:
        return False

    for limit in limits:
        date_update_obj = datetime.strptime(limit.date_update, "%Y-%m-%d").date()
        if date_update_obj == today:
            limit.current_spent = 0
            limit.updated_at = datetime.utcnow()
            new_date = date_update_obj + relativedelta(months=1)
            limit.date_update = new_date.isoformat()

    db.commit()
    return True


@router.put("/reset_all_limits", summary="–°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã")
def reset_all_limits(db: Session = Depends(get_db)):
    try:
        result = reset_limits_logic(db)
        if not result:
            raise HTTPException(status_code=404, detail="–õ–∏–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return {"message": "–õ–∏–º–∏—Ç—ã —Å–±—Ä–æ—à–µ–Ω—ã (–ø–æ –¥–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"}
    except Exception as e:
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤: {str(e)}")


@router.put("/", summary="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–∏–º–∏—Ç", 
            response_model=LimitOut,
            status_code=status.HTTP_200_OK 
            )
def edite_limits(
    limit_id: int,
    update_data:LimitUpdate,
    db: Session = Depends(get_db)):
    try:
        user_id = 1
        logger.info(f"–û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç –¥–ª—è user_id: {user_id}")
         # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        limit = db.query(Limits).filter(Limits.id == limit_id).first()
        
        if not limit:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="–õ–∏–º–∏—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
            )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –¥–æ–ª–≥ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if limit.user_id != user_id:
            raise HTTPException(
                status_code=status.HTTP_403_FORBIDDEN,
                detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ª–∏–º–∏—Ç–∞"
            )  

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è
        if update_data.balance is not None:
            limit.balance = update_data.balance
        if update_data.date_update is not None:
            limit.date_update = update_data.date_update
        limit.updated_at = datetime.utcnow()
        
        db.commit()
        db.refresh(limit)    
        return limit
    
    except Exception as e:
        db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞: {str(e)}"
        )
