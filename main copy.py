# from fastapi import FastAPI
# import db
# from db import Base, engine
# from models import User, Transactions
# from routers import users, transactions, categories
# from auth import auth
# from fastapi.openapi.utils import get_openapi
# from fastapi.middleware.cors import CORSMiddleware

# # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# Base.metadata.create_all(bind=engine)
# print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")


# # –ù–∞—Å—Ç—Ä–æ–∏–º FastAPI —Å —Ñ—É–Ω–∫—Ü–∏–µ–π –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è OpenAPI —Å—Ö–µ–º—ã
# def custom_openapi():
#     if app.openapi_schema:
#         return app.openapi_schema
#     openapi_schema = get_openapi(
#         title=app.title,
#         version=app.version,
#         description=app.description,
#         routes=app.routes,
#     )
#     openapi_schema["components"]["securitySchemes"] = {
#         "BearerAuth": {
#             "type": "http",
#             "scheme": "bearer",
#             "bearerFormat": "JWT"
#         }
#     }
#     for path in openapi_schema["paths"].values():
#         for method in path.values():
#             method.setdefault("security", [{"BearerAuth": []}])
#     app.openapi_schema = openapi_schema
#     return app.openapi_schema

# app = FastAPI(
#     title="Easy Plan API",
#     description="API –¥–ª—è Easy Plan",
#     version="0.1.0",
#     docs_url="/api/docs",
#     redoc_url="/api/redoc",
#     openapi_url="/api/openapi.json",
#     openapi_tags=[
#         {"name": "auth", "description": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"},
#         {"name": "users", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"},
#         {"name": "transactions", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"},
#         {"name": "categories", "description": "–û–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏"},
#     ]
# )


# # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ custom_openapi –∫ app
# app.openapi = custom_openapi
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# app.add_middleware(
#     CORSMiddleware,
#     allow_origins=["*"],
#     allow_credentials=True,
#     allow_methods=["*"],
#     allow_headers=["*"],
# )


# # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
# app.include_router(auth.router, prefix="/api")
# app.include_router(users.router, prefix="/api")
# app.include_router(categories.router, prefix="/api")
# app.include_router(transactions.router, prefix="/api")

# print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, JWTError
from datetime import datetime, timedelta
from typing import Optional
from fastapi.openapi.utils import get_openapi

app = FastAPI()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è JWT
SECRET_KEY = "mysecret"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Security —Å—Ö–µ–º–∞
bearer_scheme = HTTPBearer(auto_error=False)  # –Ω–µ –∫–∏–¥–∞–µ—Ç –æ—à–∏–±–∫—É —Å–∞–º –ø–æ —Å–µ–±–µ

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
def get_current_user(credentials: Optional[HTTPAuthorizationCredentials] = Depends(bearer_scheme)):
    if credentials is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Not authenticated")

    token = credentials.credentials
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username = payload.get("sub")
        if username is None:
            raise HTTPException(status_code=401, detail="Invalid token")
        return {"username": username}
    except JWTError:
        raise HTTPException(status_code=401, detail="Invalid token")

# –ü—É–±–ª–∏—á–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç ‚Äî –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
@app.get("/token")
def login_for_token():
    token = create_access_token({"sub": "testuser"})
    return {"access_token": token, "token_type": "bearer"}

# –ó–∞—â–∏—â—ë–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç
@app.get("/protected")
def read_protected(current_user=Depends(get_current_user)):
    return {"message": f"Hello {current_user['username']}"}

# Swagger: –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    openapi_schema = get_openapi(
        title="JWT Swagger Auth Example",
        version="1.0",
        description="Testing JWT bearer in Swagger",
        routes=app.routes,
    )
    openapi_schema["components"]["securitySchemes"] = {
        "BearerAuth": {
            "type": "http",
            "scheme": "bearer",
            "bearerFormat": "JWT",
        }
    }
    for path in openapi_schema["paths"].values():
        for method in path.values():
            method["security"] = [{"BearerAuth": []}]
    app.openapi_schema = openapi_schema
    return app.openapi_schema

app.openapi = custom_openapi
