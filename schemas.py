# schemas.py
from enum import Enum
from pydantic import BaseModel, ConfigDict, Field
from datetime import datetime, date
from typing import List, Optional
from enums import CategoriTypeEnum, CurrencyEnum, LanguageTypeEnum, OperationReapitType, RepeatInterval, CurrencyEnum, TransactionsTypeEnum, AccountsUnderEnum
from decimal import Decimal




class RefreshTokenRequest(BaseModel):
    refresh_token: str

class CategoriesResponse(BaseModel):
    id: int
    name: str  # –ë—ã–ª–æ amount, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å sum
    icon: Optional[str] = None  # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–ª—é—Ç—É
    color: str  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    svg:Optional[str] = None
    moded: str  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    type:str
    user_id: Optional[int] = None  # –ú–æ–∂–µ—Ç –±—ã—Ç—å int –∏–ª–∏ None
    created_at: datetime  # –ë—ã–ª–æ date, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å created_at
    updated_at: datetime  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É

    class Config:
        orm_mode = True

class CreateCategori(BaseModel):
    name: str = Field(example="–ï–¥–∞")
    icon: str = Field(example="üçï")
    color: str = Field(example="#FF5733")
    svg: str = Field(example="<svg>...</svg>") 
    moded: TransactionsTypeEnum  # ‚Üê —Ç–µ–ø–µ—Ä—å —Ç–∏–ø —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
    class Config:
        orm_mode = True

# –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
class UpdateCategoryRequest(BaseModel):
    name: Optional[str] = None
    icon: Optional[str] = None
    color: Optional[str] = None
    svg: Optional[str] = None
    moded: TransactionsTypeEnum  # ‚Üê —Ç–µ–ø–µ—Ä—å —Ç–∏–ø —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç
    class Config:
        orm_mode = True
    
    
class AccountBase(BaseModel):
    name: str
    currency: str
    balance: Decimal  
    archive: bool = False

class AccountCreate(AccountBase):
    name: str = Field(example="–°–±–µ—Ä")
    currency: CurrencyEnum = Field(example="USD")
    balance: Decimal   = Field(example=300000)
    archive: bool = False

class AccountUpdate(AccountBase):
    name: Optional[str]= Field(None, example="–¢–∏–Ω–µ–∫")
    currency: Optional[CurrencyEnum] = Field(None, example="USD")
    balance: Optional[Decimal]   = Field(None, example=3000000)
    archive: Optional[bool] = Field(None, example=False)

class AccountResponse(AccountBase):
    id: int
    user_id: int
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True   

class CreateLimit(BaseModel):
    balance:Decimal= Field(example=1300)
    category_id:int= Field(example=1)
    current_spent:Decimal= Field(example=0)
    date_update:str = Field(example="2025-06-01")
    
    
class LimitOut(BaseModel):
    id: int
    balance: Decimal
    current_spent:Decimal
    date_update: str
    user_id: int
    category_id: Optional[int] = None
    created_at: datetime
    updated_at: datetime

    class Config:
        from_attributes = True  # –∑–∞–º–µ–Ω—è–µ—Ç orm_mode –≤ Pydantic v2
        
class LimitUpdate(BaseModel):
    balance:Decimal= Field(example=2300)
    date_update: str = Field(example="2025-06-01")



    
class CreateTarget(BaseModel):
    name: str = Field(example='–ù–∞ –º–∞—à–∏–Ω—É')
    balance_target: Decimal = Field(example=100000)
    account_id:int = Field(example=1)
    balance: Optional[Decimal] = 0
    date_end: date = Field(example="2025-07-01")
    completed: Optional[bool] = False
    svg: Optional[str] = None
    icon: Optional[str] = None
    
class TargetUpdate(BaseModel):
    name: Optional[str] = None
    balance_target: Optional[Decimal] = None
    balance: Optional[Decimal] = None
    date_end: Optional[date] = None
    completed: Optional[bool] = None
    svg: Optional[str] = None
    icon: Optional[str] = None
    
class TargetsOut(CreateTarget):
    id: int
    name: str
    balance_target: Decimal
    balance: Optional[Decimal] = 0
    date_end: date
    completed: Optional[bool] = False
    svg: Optional[str] = None
    icon: Optional[str] = None
    account_id:int
    account: Optional[AccountResponse] = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
     
class DebtsTransactionOut(BaseModel):
    id:int
    name:str
    who_gave:str
    date_take:str
    date_end: Optional[datetime] = None
    comments:str
    balance:Decimal
    completed:bool
    svg:str    

class ProjectBase(BaseModel):
    name: str = Field(default="–ü–æ–ª–µ—Ç –≤ –î—É–±–∞–π")
    color: str = Field(default="#4232323")
    completed: Optional[bool] = False
    progress: Optional[int] = 0


class ProjectTransactionOut(ProjectBase):
    id: int
    name: str
    color: str
    completed: bool
    progress: int
    total:int

     
class TaskTransactioOut(BaseModel):
    id: int
    name: str
    # project:Optional[ProjectTransactionOut] = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å  
        
class CreateTransaction(BaseModel):
    sum:Decimal = Field(example=1000)  # –ë—ã–ª–æ amount, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å sum
    moded: TransactionsTypeEnum = Field(example="income")  # ‚Üê —Ç–µ–ø–µ—Ä—å —Ç–∏–ø —Å—Ç—Ä–æ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç   
    repeat_operation: Optional[bool] = Field(default=False)  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â—É—é—Å—è –æ–ø–µ—Ä–∞—Ü–∏—é
    category_id: Optional[int] = Field(None, example=1)  # –î–æ–±–∞–≤–ª—è–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    account_id: Optional[int] = Field(example=1)  # –î–æ–±–∞–≤–ª—è–µ–º ID —Å—á–µ—Ç–∞
    debt_id: Optional[int] = Field(None, example=None)  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    target_id: Optional[int] = Field(None, example=None)  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    task_id: Optional[int] = Field(None, example=None)  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    date_operation: Optional[datetime] = Field(default=None, example="2023-12-31T23:59:59")
    class Config:
        orm_mode = True
    
class TransactionResponse(BaseModel):
    id: int
    sum: Decimal  
    balance: Decimal  
    currency: str
    moded: str
    category: Optional[CategoriesResponse]
    limit: Optional[CreateLimit]
    target: Optional[TargetsOut]
    debt: Optional[DebtsTransactionOut]
    task: Optional[TaskTransactioOut]
    
    created_at: datetime
    updated_at: datetime

    class Config:
        orm_mode = True
# –ù–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—É–º–º –ø–æ –¥–Ω—è–º
class DailySumResponse(BaseModel):
    date: date
    sum: Decimal  

class DailySumsResponse(BaseModel):
    value: Decimal  
    date: str  # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥

# –ö–ª–∞—Å—Å –¥–ª—è –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
class TransactionsWithStatsResponse(BaseModel):
    total: Decimal  
    daily_sums: List[DailySumResponse]  # –¢–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
    transactions: List[TransactionResponse]
    graph_data:List[DailySumsResponse]
    
class TransactionsCategoriesEnum(str, Enum):
    # –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è (receipts)
    SALARY = "–ó–∞—Ä–ø–ª–∞—Ç–∞"
    BUSINESS_INCOME = "–ë–∏–∑–Ω–µ—Å –¥–æ—Ö–æ–¥"
    INVESTMENTS = "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"
    GIFTS = "–ü–æ–¥–∞—Ä–∫–∏"
    REFUNDS = "–í–æ–∑–≤—Ä–∞—Ç—ã"
    OTHER_INCOME = "–î—Ä—É–≥–∏–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è"
    
    # –†–∞—Å—Ö–æ–¥—ã (expenses)
    SUPERMARKET = "–°—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç—ã"
    HEALTH = "–ó–¥–æ—Ä–æ–≤—å–µ"
    TRANSPORT = "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    ENTERTAINMENT = "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è"
    COMMUNICATION = "–°–≤—è–∑—å"
    EDUCATION = "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"
    RENT = "–ê—Ä–µ–Ω–¥–∞"
    UTILITIES = "–ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏"
    RESTAURANTS = "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã"
    CLOTHING = "–û–¥–µ–∂–¥–∞"
    TRAVEL = "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
    INSURANCE = "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
    TAXES = "–ù–∞–ª–æ–≥–∏"
    CHARITY = "–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
    HOUSEHOLD = "–•–æ–∑—Ç–æ–≤–∞—Ä—ã"
    PETS = "–ü–∏—Ç–æ–º—Ü—ã"
    CHILDREN = "–î–µ—Ç–∏"
    BEAUTY = "–ö—Ä–∞—Å–æ—Ç–∞"
    ELECTRONICS = "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"
    SUBSCRIPTIONS = "–ü–æ–¥–ø–∏—Å–∫–∏"
    OTHER_EXPENSES = "–î—Ä—É–≥–∏–µ —Ä–∞—Å—Ö–æ–¥—ã"
    
class UserResponse(BaseModel):
    id: int
    apple_id: str
    tg_id: Optional[str] = None
    tg_name: Optional[str] = None
    premium: bool = False
    premium_start: Optional[datetime] = None
    premium_expiration: Optional[datetime] = None
    email: Optional[str] = None
    timezone: Optional[str] = None
    created_at: datetime
    updated_at: datetime
    # transactions: List[TransactionResponse]  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    # user_categories: List[CategoriesResponse]

class UserCreate(BaseModel):
    apple_id: str
    tg_id: Optional[str] = None
    tg_name: Optional[str] = None
    premium: Optional[bool] = False
    email: Optional[str] = None

class UserFinance(BaseModel):
    id: int    
    transactions: List[TransactionResponse]  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

class Token(BaseModel):
    access_token: str
    refresh_token: str
    token_type: str
    user_data:object
    
class DebtsResponse(BaseModel):
    id:int
    name:str
    who_gave:str
    date_take:str
    date_end:date
    comments:str
    balance:Decimal
    completed:bool
    svg:str
    account_id:int
    account: Optional[AccountResponse] = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    transactions: List[TransactionResponse]  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    transactions_sum: Optional[Decimal] = None  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø–æ–ª–µ
     
class DebtsCreate(BaseModel):
    name:str = Field(example="–ù–∞ –µ–¥—É")
    account_id:int = Field(example=1)
    who_gave:str = Field(example="–ü–µ—Ç—è –ò–≤–Ω–æ–≤")
    date_take:str = Field(example="2025-05-01")
    date_end:str = Field(example="2025-06-01")
    comments:str = Field(example="–ß—Ç–æ-—Ç–æ")
    balance:Decimal= Field(example=30000)
    svg:str = Field(example="")

class DebtsUpdate(BaseModel):
    name: Optional[str] = None
    who_gave: Optional[str] = None
    date_take: Optional[str] = None
    date_end: Optional[str] = None
    comments: Optional[str] = None
    balance: Optional[float] = None
    svg: Optional[str] = None
    completed: Optional[bool] = None
    
class CreateOperationsRepeat(BaseModel):
    type: OperationReapitType = Field(..., example="transaction", description="–¢–∏–ø –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –æ–ø–µ—Ä–∞—Ü–∏–∏")
    interval: RepeatInterval = Field(..., example="month",  description="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è day, week, month, year")
    repeat_date: datetime = Field(..., example="2023-01-01T00:00:00", description="–î–∞—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è")
    repeat_count: int = Field(default=0, example=3, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
    transaction_id: Optional[int] = Field(None, example=None)  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ

  


class OperationsResponse(BaseModel):
        id:int
        repeat_date:datetime
        repeat_count:int
        interval:RepeatInterval
        type:OperationReapitType
        transaction: Optional[TransactionResponse]  # –¥–æ–ø—É—Å–∫–∞–µ—Ç None  # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        target_id: Optional[int] = None  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        debt_id: Optional[int] = None  # –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        
class OperationsWithLimitsResponse(BaseModel):
        total: int
        reapits:List[OperationsResponse]
        


class ProjectCreate(ProjectBase):
    pass

class ProjectUpdate(BaseModel):
    name: Optional[str] = None
    color: Optional[str] = None
    completed: Optional[bool] = None
    progress: Optional[int] = None

class ProjectOut(ProjectBase):
    id: int

    class Config:
        orm_mode = True


        
class TaskCreate(BaseModel):
    name: str  = Field(default="–ë–∏–ª–µ—Ç—ã", example="–ö–æ–Ω—Ü–µ—Ä—Ç")
    date_end: datetime = Field(example="2023-12-31T23:59:59")
    sum: Optional[Decimal] = Field(default=None, example=5000)
    comments: Optional[str] = Field(default=None, example="–ö—É–ø–∏—Ç—å 2 –±–∏–ª–µ—Ç–∞")
    completed: Optional[bool] = False
    moded: Optional[TransactionsTypeEnum] = Field(default=None, example="expense")
    project_id: int = Field(default=1, example=1)
    account_id: Optional[int] = Field(default=None, example=1)
    class Config:
        schema_extra = {
            "example": {
                "date_end": "2023-12-31T23:59:59",
                "project_id": 42,
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã - –±—É–¥—É—Ç NULL
            }
        }
 

class TaskUpdate(BaseModel):
    
    name: Optional[str]  = Field(default="–ë–∏–ª–µ—Ç—ã", example="–ö–æ–Ω—Ü–µ—Ä—Ç")
    date_end: Optional[datetime] = Field(default=None, example="2023-12-31T23:59:59")
    sum: Optional[Decimal] = Field(default=None, example=5000)
    comments: Optional[str] = Field(default=None, example="–ö—É–ø–∏—Ç—å 2 –±–∏–ª–µ—Ç–∞")
    completed: Optional[bool] = False
    moded: Optional[TransactionsTypeEnum] = Field(default=None, example="expense")
    project_id: Optional[int] = Field(default=1, example=1)
    account_id: Optional[int] = Field(default=None, example=1)
    
 

class TaskOut(TaskCreate):
    id: int
    created_at: datetime
    updated_at: datetime
    account: Optional[AccountResponse] = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    transaction: Optional[TransactionResponse] = None  
    class Config:
        orm_mode = True

class TaskUpdateOut(BaseModel):
        task:TaskOut
        transaction_status:str

class ProjectTaskOut(BaseModel):
    id: int
    name: Optional[str] = None  # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ None, –∏ —Å—Ç—Ä–æ–∫—É
    sum: Decimal
    date_end: datetime
    comments: Optional[str] = None  # –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ None, –∏ —Å—Ç—Ä–æ–∫—É
    completed:bool
    moded:str
    account_id: int
    
    model_config = ConfigDict(from_attributes=True)

class ProjectResponse(BaseModel):
    id: int
    name: str
    color: str
    completed: bool
    progress: int
    tasks:List[ProjectTaskOut] = None 
    total:int
    total_sum: Decimal  # –°—É–º–º–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    class Config:
        orm_mode = True

class ProjectResponseWithTotal(BaseModel):
        projects:List[ProjectResponse] = []  # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –µ—Å–ª–∏ –µ—Å—Ç—å
        total:int

class RepeatOperationOut(BaseModel):
    id:int
    balance: Decimal
    moded: Optional[str] = None  # –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å None
    completed: Optional[bool] = False  # –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
    name: Optional[str] = None  # –ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, –º–æ–∂–µ—Ç –±—ã—Ç—å None
    category: Optional[CategoriesResponse] = None  
    account: Optional[AccountResponse] = None  # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    debt: Optional[DebtsTransactionOut] = None 
    target: Optional[TargetsOut] = None 
    limit: Optional[CreateLimit] = None    
    task: Optional[TaskTransactioOut] = None  
    planned_date: date
    created_at: datetime
    updated_at: datetime
# Pydantic-—Å—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
class CreateRepeatOperation(BaseModel):
    balance: Decimal = Field(..., description="–ë–∞–ª–∞–Ω—Å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    date_start:str = Field(..., example="2025-06-09")
    moded: TransactionsTypeEnum = Field(..., example="expense", description="–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏")
    # transaction_id: Optional[int] = Field(None, description="ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")
    name : Optional[str] = Field(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏")
    category_id:  Optional[int] = Field(None, description="ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    account_id:  Optional[int] = Field(..., example=1, description="ID —Å—á–µ—Ç–∞")
    debt_id: Optional[int] = Field(None, description="ID –¥–æ–ª–≥–∞")
    target_id: Optional[int] = Field(None, description="ID —Ü–µ–ª–∏")
    limit_id: Optional[int] = Field(None, description="ID –ª–∏–º–∏—Ç–∞")
    task_id: Optional[int] = Field(None, description="ID –∑–∞–¥–∞—á–∏")
    interval: RepeatInterval = Field(..., example="day",  description="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è day, week, month, year")
    count: int = Field(default=5, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ü–∏–∏")
    
class RepeatOperationListOut(BaseModel):
    total: int
    reapits: List[RepeatOperationOut]  # –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è